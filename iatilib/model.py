from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy import Column,Integer,DateTime,Float,ForeignKey,UnicodeText,Boolean
from . import engine
from parser import _nav, _parse_float, _parse_int, _parse_datetime, _parse_boolean

Base = declarative_base()

class IndexedResource(Base):
    __tablename__ = 'indexed_resource'
    id = Column(UnicodeText, primary_key=True)
    url = Column(UnicodeText)
    last_modified = Column(DateTime)
    state = Column(Integer)
    activities = relationship("Activity")

class CodelistSector(Base):
    __tablename__ = 'codelist_sector'
    code = Column(Integer, primary_key=True)
    name = Column(UnicodeText)
    description = Column(UnicodeText)
    category = Column(Integer)
    category_name = Column(UnicodeText)
    category_description = Column(UnicodeText)

# =============================================================
# ========   Everything below is code-generated!   ============
# ========   See /spec for how it's made.          ============
# =============================================================
# ==  eg. (1) delete everything below                        ==
# ==      (2) put your cursor down there                     ==
# ==      (3) execute vim command:                           ==
# ==          :r ! python spec/codegen.py                    ==
# =============================================================

#######
### Autogenerated models for model.py created on 2013-02-05 18:47:34.289170
#######

class Activity(Base):
    __tablename__ = 'activity'
    id = Column(Integer, primary_key=True)
    transaction = relationship("Transaction")
    sector = relationship("Sector")
    participatingorg = relationship("ParticipatingOrg")
    contactinfo = relationship("ContactInfo")
    activitydate = relationship("ActivityDate")
    parent_id = Column(UnicodeText, ForeignKey('indexed_resource.id'), nullable=False)
    version = Column(Float)	# @version
    last_updated_datetime = Column(DateTime)	# @last-updated-datetime
    lang = Column(UnicodeText)	# @xml:lang
    default_currency = Column(UnicodeText)	# @default-currency
    hierarchy = Column(Float)	# @hierarchy
    linked_data_uri = Column(UnicodeText)	# @linked-data-uri
    activity_website__text = Column(UnicodeText)	# activity-website/text()
    reporting_org__text = Column(UnicodeText)	# reporting-org/text()
    reporting_org__ref = Column(UnicodeText)	# reporting-org/@ref
    reporting_org__type = Column(UnicodeText)	# reporting-org/@type
    reporting_org__lang = Column(UnicodeText)	# reporting-org/@xml:lang
    recipient_country__text = Column(UnicodeText)	# recipient-country/text()
    recipient_country__code = Column(UnicodeText)	# recipient-country/@code
    recipient_country__percentage = Column(Float)	# recipient-country/@percentage
    recipient_country__lang = Column(UnicodeText)	# recipient-country/@xml:lang
    recipient_region__text = Column(UnicodeText)	# recipient-region/text()
    recipient_region__code = Column(UnicodeText)	# recipient-region/@code
    recipient_region__percentage = Column(Float)	# recipient-region/@percentage
    recipient_region__lang = Column(UnicodeText)	# recipient-region/@xml:lang
    collaboration_type__text = Column(UnicodeText)	# collaboration-type/text()
    collaboration_type__code = Column(UnicodeText)	# collaboration-type/@code
    collaboration_type__lang = Column(UnicodeText)	# collaboration-type/@xml:lang
    default_flow_type__text = Column(UnicodeText)	# default-flow-type/text()
    default_flow_type__code = Column(UnicodeText)	# default-flow-type/@code
    default_flow_type__lang = Column(UnicodeText)	# default-flow-type/@xml:lang
    default_aid_type__text = Column(UnicodeText)	# default-aid-type/text()
    default_aid_type__code = Column(UnicodeText)	# default-aid-type/@code
    default_aid_type__lang = Column(UnicodeText)	# default-aid-type/@xml:lang
    default_finance_type__text = Column(UnicodeText)	# default-finance-type/text()
    default_finance_type__code = Column(UnicodeText)	# default-finance-type/@code
    default_finance_type__lang = Column(UnicodeText)	# default-finance-type/@xml:lang
    iati_identifier__text = Column(UnicodeText)	# iati-identifier/text()
    other_identifier__text = Column(UnicodeText)	# other-identifier/text()
    other_identifier__owner_ref = Column(UnicodeText)	# other-identifier/@owner-ref
    other_identifier__owner_name = Column(UnicodeText)	# other-identifier/@owner-name
    title__text = Column(UnicodeText)	# title/text()
    title__lang = Column(UnicodeText)	# title/@xml:lang
    description__text = Column(UnicodeText)	# description/text()
    description__type = Column(UnicodeText)	# description/@type
    description__lang = Column(UnicodeText)	# description/@xml:lang
    activity_status__text = Column(UnicodeText)	# activity-status/text()
    activity_status__code = Column(UnicodeText)	# activity-status/@code
    activity_status__lang = Column(UnicodeText)	# activity-status/@xml:lang
    default_tied_status__text = Column(UnicodeText)	# default-tied-status/text()
    default_tied_status__code = Column(UnicodeText)	# default-tied-status/@code
    default_tied_status__lang = Column(UnicodeText)	# default-tied-status/@xml:lang
    policy_marker__text = Column(UnicodeText)	# policy-marker/text()
    policy_marker__code = Column(UnicodeText)	# policy-marker/@code
    policy_marker__vocabulary = Column(UnicodeText)	# policy-marker/@vocabulary
    policy_marker__significance = Column(UnicodeText)	# policy-marker/@significance
    policy_marker__lang = Column(UnicodeText)	# policy-marker/@xml:lang
    location__percentage = Column(Float)	# location/@percentage
    location__location_type__text = Column(UnicodeText)	# location/location-type/text()
    location__location_type__code = Column(UnicodeText)	# location/location-type/@code
    location__location_type__lang = Column(UnicodeText)	# location/location-type/@xml:lang
    location__name__text = Column(UnicodeText)	# location/name/text()
    location__name__lang = Column(UnicodeText)	# location/name/@xml:lang
    location__description__text = Column(UnicodeText)	# location/description/text()
    location__description__lang = Column(UnicodeText)	# location/description/@xml:lang
    location__administrative__text = Column(UnicodeText)	# location/administrative/text()
    location__administrative__country = Column(UnicodeText)	# location/administrative/@country
    location__administrative__adm1 = Column(UnicodeText)	# location/administrative/@adm1
    location__administrative__adm2 = Column(UnicodeText)	# location/administrative/@adm2
    location__coordinates__latitude = Column(Float)	# location/coordinates/@latitude
    location__coordinates__longitude = Column(Float)	# location/coordinates/@longitude
    location__coordinates__precision = Column(UnicodeText)	# location/coordinates/@precision
    location__gazetteer_entry__text = Column(UnicodeText)	# location/gazetteer-entry/text()
    location__gazetteer_entry__gazetteer_ref = Column(UnicodeText)	# location/gazetteer-entry/@gazetteer-ref
    result__type = Column(UnicodeText)	# result/@type
    result__aggregation_status = Column(Boolean)	# result/@aggregation-status
    result__title__text = Column(UnicodeText)	# result/title/text()
    result__title__lang = Column(UnicodeText)	# result/title/@xml:lang
    result__description__text = Column(UnicodeText)	# result/description/text()
    result__description__type = Column(UnicodeText)	# result/description/@type
    result__description__lang = Column(UnicodeText)	# result/description/@xml:lang
    result__indicator__measure = Column(UnicodeText)	# result/indicator/@measure
    result__indicator__ascending = Column(Boolean)	# result/indicator/@ascending
    result__indicator__title__text = Column(UnicodeText)	# result/indicator/title/text()
    result__indicator__title__lang = Column(UnicodeText)	# result/indicator/title/@xml:lang
    result__indicator__description__text = Column(UnicodeText)	# result/indicator/description/text()
    result__indicator__description__type = Column(UnicodeText)	# result/indicator/description/@type
    result__indicator__description__lang = Column(UnicodeText)	# result/indicator/description/@xml:lang
    result__indicator__baseline__year = Column(Float)	# result/indicator/baseline/@year
    result__indicator__baseline__value = Column(UnicodeText)	# result/indicator/baseline/@value
    result__indicator__baseline__comment__text = Column(UnicodeText)	# result/indicator/baseline/comment/text()
    result__indicator__baseline__comment__lang = Column(UnicodeText)	# result/indicator/baseline/comment/@xml:lang
    result__indicator__period__period_start__text = Column(UnicodeText)	# result/indicator/period/period-start/text()
    result__indicator__period__period_start__iso_date = Column(DateTime)	# result/indicator/period/period-start/@iso-date
    result__indicator__period__period_end__text = Column(UnicodeText)	# result/indicator/period/period-end/text()
    result__indicator__period__period_end__iso_date = Column(DateTime)	# result/indicator/period/period-end/@iso-date
    result__indicator__period__target__value = Column(UnicodeText)	# result/indicator/period/target/@value
    result__indicator__period__target__comment__text = Column(UnicodeText)	# result/indicator/period/target/comment/text()
    result__indicator__period__target__comment__lang = Column(UnicodeText)	# result/indicator/period/target/comment/@xml:lang
    result__indicator__period__actual__value = Column(UnicodeText)	# result/indicator/period/actual/@value
    result__indicator__period__actual__comment__text = Column(UnicodeText)	# result/indicator/period/actual/comment/text()
    result__indicator__period__actual__comment__lang = Column(UnicodeText)	# result/indicator/period/actual/comment/@xml:lang
    conditions__attached = Column(Boolean)	# conditions/@attached
    conditions__condition__text = Column(UnicodeText)	# conditions/condition/text()
    conditions__condition__type = Column(UnicodeText)	# conditions/condition/@type
    budget__type = Column(UnicodeText)	# budget/@type
    budget__period_start__text = Column(UnicodeText)	# budget/period-start/text()
    budget__period_start__iso_date = Column(DateTime)	# budget/period-start/@iso-date
    budget__period_end__text = Column(UnicodeText)	# budget/period-end/text()
    budget__period_end__iso_date = Column(DateTime)	# budget/period-end/@iso-date
    budget__value__text = Column(Float)	# budget/value/text()
    budget__value__currency = Column(UnicodeText)	# budget/value/@currency
    budget__value__value_date = Column(DateTime)	# budget/value/@value-date
    planned_disbursement__updated = Column(UnicodeText)	# planned-disbursement/@updated
    planned_disbursement__period_start__text = Column(UnicodeText)	# planned-disbursement/period-start/text()
    planned_disbursement__period_start__iso_date = Column(DateTime)	# planned-disbursement/period-start/@iso-date
    planned_disbursement__period_end__text = Column(UnicodeText)	# planned-disbursement/period-end/text()
    planned_disbursement__period_end__iso_date = Column(DateTime)	# planned-disbursement/period-end/@iso-date
    planned_disbursement__value__text = Column(Float)	# planned-disbursement/value/text()
    planned_disbursement__value__currency = Column(UnicodeText)	# planned-disbursement/value/@currency
    planned_disbursement__value__value_date = Column(DateTime)	# planned-disbursement/value/@value-date
    related_activity__text = Column(UnicodeText)	# related-activity/text()
    related_activity__ref = Column(UnicodeText)	# related-activity/@ref
    related_activity__type = Column(UnicodeText)	# related-activity/@type
    related_activity__lang = Column(UnicodeText)	# related-activity/@xml:lang
    document_link__url = Column(UnicodeText)	# document-link/@url
    document_link__format = Column(UnicodeText)	# document-link/@format
    document_link__title__text = Column(UnicodeText)	# document-link/title/text()
    document_link__title__lang = Column(UnicodeText)	# document-link/title/@xml:lang
    document_link__category__text = Column(UnicodeText)	# document-link/category/text()
    document_link__category__code = Column(UnicodeText)	# document-link/category/@code
    document_link__category__lang = Column(UnicodeText)	# document-link/category/@xml:lang
    document_link__language__text = Column(UnicodeText)	# document-link/language/text()
    document_link__language__code = Column(UnicodeText)	# document-link/language/@code
    document_link__language__lang = Column(UnicodeText)	# document-link/language/@xml:lang
    legacy_data__text = Column(UnicodeText)	# legacy-data/text()
    legacy_data__name = Column(UnicodeText)	# legacy-data/@name
    legacy_data__value = Column(UnicodeText)	# legacy-data/@value
    legacy_data__iati_equivalent = Column(UnicodeText)	# legacy-data/@iati-equivalent
    @classmethod
    def _parse_xml(cls,logger,xml):
        data = {}
        data['version'] = _nav(logger, xml, [], attrib='version', parser=_parse_float)
        data['last_updated_datetime'] = _nav(logger, xml, [], attrib='last-updated-datetime', parser=_parse_datetime)
        data['lang'] = _nav(logger, xml, [], attrib='xml:lang')
        data['default_currency'] = _nav(logger, xml, [], attrib='default-currency')
        data['hierarchy'] = _nav(logger, xml, [], attrib='hierarchy', parser=_parse_float)
        data['linked_data_uri'] = _nav(logger, xml, [], attrib='linked-data-uri')
        data['activity_website__text'] = _nav(logger, xml, ['activity-website'], text=True)
        data['reporting_org__text'] = _nav(logger, xml, ['reporting-org'], text=True)
        data['reporting_org__ref'] = _nav(logger, xml, ['reporting-org'], attrib='ref')
        data['reporting_org__type'] = _nav(logger, xml, ['reporting-org'], attrib='type')
        data['reporting_org__lang'] = _nav(logger, xml, ['reporting-org'], attrib='xml:lang')
        data['recipient_country__text'] = _nav(logger, xml, ['recipient-country'], text=True)
        data['recipient_country__code'] = _nav(logger, xml, ['recipient-country'], attrib='code')
        data['recipient_country__percentage'] = _nav(logger, xml, ['recipient-country'], attrib='percentage', parser=_parse_float)
        data['recipient_country__lang'] = _nav(logger, xml, ['recipient-country'], attrib='xml:lang')
        data['recipient_region__text'] = _nav(logger, xml, ['recipient-region'], text=True)
        data['recipient_region__code'] = _nav(logger, xml, ['recipient-region'], attrib='code')
        data['recipient_region__percentage'] = _nav(logger, xml, ['recipient-region'], attrib='percentage', parser=_parse_float)
        data['recipient_region__lang'] = _nav(logger, xml, ['recipient-region'], attrib='xml:lang')
        data['collaboration_type__text'] = _nav(logger, xml, ['collaboration-type'], text=True)
        data['collaboration_type__code'] = _nav(logger, xml, ['collaboration-type'], attrib='code')
        data['collaboration_type__lang'] = _nav(logger, xml, ['collaboration-type'], attrib='xml:lang')
        data['default_flow_type__text'] = _nav(logger, xml, ['default-flow-type'], text=True)
        data['default_flow_type__code'] = _nav(logger, xml, ['default-flow-type'], attrib='code')
        data['default_flow_type__lang'] = _nav(logger, xml, ['default-flow-type'], attrib='xml:lang')
        data['default_aid_type__text'] = _nav(logger, xml, ['default-aid-type'], text=True)
        data['default_aid_type__code'] = _nav(logger, xml, ['default-aid-type'], attrib='code')
        data['default_aid_type__lang'] = _nav(logger, xml, ['default-aid-type'], attrib='xml:lang')
        data['default_finance_type__text'] = _nav(logger, xml, ['default-finance-type'], text=True)
        data['default_finance_type__code'] = _nav(logger, xml, ['default-finance-type'], attrib='code')
        data['default_finance_type__lang'] = _nav(logger, xml, ['default-finance-type'], attrib='xml:lang')
        data['iati_identifier__text'] = _nav(logger, xml, ['iati-identifier'], text=True)
        data['other_identifier__text'] = _nav(logger, xml, ['other-identifier'], text=True)
        data['other_identifier__owner_ref'] = _nav(logger, xml, ['other-identifier'], attrib='owner-ref')
        data['other_identifier__owner_name'] = _nav(logger, xml, ['other-identifier'], attrib='owner-name')
        data['title__text'] = _nav(logger, xml, ['title'], text=True)
        data['title__lang'] = _nav(logger, xml, ['title'], attrib='xml:lang')
        data['description__text'] = _nav(logger, xml, ['description'], text=True)
        data['description__type'] = _nav(logger, xml, ['description'], attrib='type')
        data['description__lang'] = _nav(logger, xml, ['description'], attrib='xml:lang')
        data['activity_status__text'] = _nav(logger, xml, ['activity-status'], text=True)
        data['activity_status__code'] = _nav(logger, xml, ['activity-status'], attrib='code')
        data['activity_status__lang'] = _nav(logger, xml, ['activity-status'], attrib='xml:lang')
        data['default_tied_status__text'] = _nav(logger, xml, ['default-tied-status'], text=True)
        data['default_tied_status__code'] = _nav(logger, xml, ['default-tied-status'], attrib='code')
        data['default_tied_status__lang'] = _nav(logger, xml, ['default-tied-status'], attrib='xml:lang')
        data['policy_marker__text'] = _nav(logger, xml, ['policy-marker'], text=True)
        data['policy_marker__code'] = _nav(logger, xml, ['policy-marker'], attrib='code')
        data['policy_marker__vocabulary'] = _nav(logger, xml, ['policy-marker'], attrib='vocabulary')
        data['policy_marker__significance'] = _nav(logger, xml, ['policy-marker'], attrib='significance')
        data['policy_marker__lang'] = _nav(logger, xml, ['policy-marker'], attrib='xml:lang')
        data['location__percentage'] = _nav(logger, xml, ['location'], attrib='percentage', parser=_parse_float)
        data['location__location_type__text'] = _nav(logger, xml, ['location','location-type'], text=True)
        data['location__location_type__code'] = _nav(logger, xml, ['location','location-type'], attrib='code')
        data['location__location_type__lang'] = _nav(logger, xml, ['location','location-type'], attrib='xml:lang')
        data['location__name__text'] = _nav(logger, xml, ['location','name'], text=True)
        data['location__name__lang'] = _nav(logger, xml, ['location','name'], attrib='xml:lang')
        data['location__description__text'] = _nav(logger, xml, ['location','description'], text=True)
        data['location__description__lang'] = _nav(logger, xml, ['location','description'], attrib='xml:lang')
        data['location__administrative__text'] = _nav(logger, xml, ['location','administrative'], text=True)
        data['location__administrative__country'] = _nav(logger, xml, ['location','administrative'], attrib='country')
        data['location__administrative__adm1'] = _nav(logger, xml, ['location','administrative'], attrib='adm1')
        data['location__administrative__adm2'] = _nav(logger, xml, ['location','administrative'], attrib='adm2')
        data['location__coordinates__latitude'] = _nav(logger, xml, ['location','coordinates'], attrib='latitude', parser=_parse_float)
        data['location__coordinates__longitude'] = _nav(logger, xml, ['location','coordinates'], attrib='longitude', parser=_parse_float)
        data['location__coordinates__precision'] = _nav(logger, xml, ['location','coordinates'], attrib='precision')
        data['location__gazetteer_entry__text'] = _nav(logger, xml, ['location','gazetteer-entry'], text=True)
        data['location__gazetteer_entry__gazetteer_ref'] = _nav(logger, xml, ['location','gazetteer-entry'], attrib='gazetteer-ref')
        data['result__type'] = _nav(logger, xml, ['result'], attrib='type')
        data['result__aggregation_status'] = _nav(logger, xml, ['result'], attrib='aggregation-status', parser=_parse_boolean)
        data['result__title__text'] = _nav(logger, xml, ['result','title'], text=True)
        data['result__title__lang'] = _nav(logger, xml, ['result','title'], attrib='xml:lang')
        data['result__description__text'] = _nav(logger, xml, ['result','description'], text=True)
        data['result__description__type'] = _nav(logger, xml, ['result','description'], attrib='type')
        data['result__description__lang'] = _nav(logger, xml, ['result','description'], attrib='xml:lang')
        data['result__indicator__measure'] = _nav(logger, xml, ['result','indicator'], attrib='measure')
        data['result__indicator__ascending'] = _nav(logger, xml, ['result','indicator'], attrib='ascending', parser=_parse_boolean)
        data['result__indicator__title__text'] = _nav(logger, xml, ['result','indicator','title'], text=True)
        data['result__indicator__title__lang'] = _nav(logger, xml, ['result','indicator','title'], attrib='xml:lang')
        data['result__indicator__description__text'] = _nav(logger, xml, ['result','indicator','description'], text=True)
        data['result__indicator__description__type'] = _nav(logger, xml, ['result','indicator','description'], attrib='type')
        data['result__indicator__description__lang'] = _nav(logger, xml, ['result','indicator','description'], attrib='xml:lang')
        data['result__indicator__baseline__year'] = _nav(logger, xml, ['result','indicator','baseline'], attrib='year', parser=_parse_float)
        data['result__indicator__baseline__value'] = _nav(logger, xml, ['result','indicator','baseline'], attrib='value')
        data['result__indicator__baseline__comment__text'] = _nav(logger, xml, ['result','indicator','baseline','comment'], text=True)
        data['result__indicator__baseline__comment__lang'] = _nav(logger, xml, ['result','indicator','baseline','comment'], attrib='xml:lang')
        data['result__indicator__period__period_start__text'] = _nav(logger, xml, ['result','indicator','period','period-start'], text=True)
        data['result__indicator__period__period_start__iso_date'] = _nav(logger, xml, ['result','indicator','period','period-start'], attrib='iso-date', parser=_parse_datetime)
        data['result__indicator__period__period_end__text'] = _nav(logger, xml, ['result','indicator','period','period-end'], text=True)
        data['result__indicator__period__period_end__iso_date'] = _nav(logger, xml, ['result','indicator','period','period-end'], attrib='iso-date', parser=_parse_datetime)
        data['result__indicator__period__target__value'] = _nav(logger, xml, ['result','indicator','period','target'], attrib='value')
        data['result__indicator__period__target__comment__text'] = _nav(logger, xml, ['result','indicator','period','target','comment'], text=True)
        data['result__indicator__period__target__comment__lang'] = _nav(logger, xml, ['result','indicator','period','target','comment'], attrib='xml:lang')
        data['result__indicator__period__actual__value'] = _nav(logger, xml, ['result','indicator','period','actual'], attrib='value')
        data['result__indicator__period__actual__comment__text'] = _nav(logger, xml, ['result','indicator','period','actual','comment'], text=True)
        data['result__indicator__period__actual__comment__lang'] = _nav(logger, xml, ['result','indicator','period','actual','comment'], attrib='xml:lang')
        data['conditions__attached'] = _nav(logger, xml, ['conditions'], attrib='attached', parser=_parse_boolean)
        data['conditions__condition__text'] = _nav(logger, xml, ['conditions','condition'], text=True)
        data['conditions__condition__type'] = _nav(logger, xml, ['conditions','condition'], attrib='type')
        data['budget__type'] = _nav(logger, xml, ['budget'], attrib='type')
        data['budget__period_start__text'] = _nav(logger, xml, ['budget','period-start'], text=True)
        data['budget__period_start__iso_date'] = _nav(logger, xml, ['budget','period-start'], attrib='iso-date', parser=_parse_datetime)
        data['budget__period_end__text'] = _nav(logger, xml, ['budget','period-end'], text=True)
        data['budget__period_end__iso_date'] = _nav(logger, xml, ['budget','period-end'], attrib='iso-date', parser=_parse_datetime)
        data['budget__value__text'] = _nav(logger, xml, ['budget','value'], text=True, parser=_parse_float)
        data['budget__value__currency'] = _nav(logger, xml, ['budget','value'], attrib='currency')
        data['budget__value__value_date'] = _nav(logger, xml, ['budget','value'], attrib='value-date', parser=_parse_datetime)
        data['planned_disbursement__updated'] = _nav(logger, xml, ['planned-disbursement'], attrib='updated')
        data['planned_disbursement__period_start__text'] = _nav(logger, xml, ['planned-disbursement','period-start'], text=True)
        data['planned_disbursement__period_start__iso_date'] = _nav(logger, xml, ['planned-disbursement','period-start'], attrib='iso-date', parser=_parse_datetime)
        data['planned_disbursement__period_end__text'] = _nav(logger, xml, ['planned-disbursement','period-end'], text=True)
        data['planned_disbursement__period_end__iso_date'] = _nav(logger, xml, ['planned-disbursement','period-end'], attrib='iso-date', parser=_parse_datetime)
        data['planned_disbursement__value__text'] = _nav(logger, xml, ['planned-disbursement','value'], text=True, parser=_parse_float)
        data['planned_disbursement__value__currency'] = _nav(logger, xml, ['planned-disbursement','value'], attrib='currency')
        data['planned_disbursement__value__value_date'] = _nav(logger, xml, ['planned-disbursement','value'], attrib='value-date', parser=_parse_datetime)
        data['related_activity__text'] = _nav(logger, xml, ['related-activity'], text=True)
        data['related_activity__ref'] = _nav(logger, xml, ['related-activity'], attrib='ref')
        data['related_activity__type'] = _nav(logger, xml, ['related-activity'], attrib='type')
        data['related_activity__lang'] = _nav(logger, xml, ['related-activity'], attrib='xml:lang')
        data['document_link__url'] = _nav(logger, xml, ['document-link'], attrib='url')
        data['document_link__format'] = _nav(logger, xml, ['document-link'], attrib='format')
        data['document_link__title__text'] = _nav(logger, xml, ['document-link','title'], text=True)
        data['document_link__title__lang'] = _nav(logger, xml, ['document-link','title'], attrib='xml:lang')
        data['document_link__category__text'] = _nav(logger, xml, ['document-link','category'], text=True)
        data['document_link__category__code'] = _nav(logger, xml, ['document-link','category'], attrib='code')
        data['document_link__category__lang'] = _nav(logger, xml, ['document-link','category'], attrib='xml:lang')
        data['document_link__language__text'] = _nav(logger, xml, ['document-link','language'], text=True)
        data['document_link__language__code'] = _nav(logger, xml, ['document-link','language'], attrib='code')
        data['document_link__language__lang'] = _nav(logger, xml, ['document-link','language'], attrib='xml:lang')
        data['legacy_data__text'] = _nav(logger, xml, ['legacy-data'], text=True)
        data['legacy_data__name'] = _nav(logger, xml, ['legacy-data'], attrib='name')
        data['legacy_data__value'] = _nav(logger, xml, ['legacy-data'], attrib='value')
        data['legacy_data__iati_equivalent'] = _nav(logger, xml, ['legacy-data'], attrib='iati-equivalent')
        return Activity(**data)

class Transaction(Base):
    __tablename__ = 'transaction'
    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('activity.id'), nullable=False)
    ref = Column(UnicodeText)	# @ref
    value__text = Column(Float)	# value/text()
    value__currency = Column(UnicodeText)	# value/@currency
    value__value_date = Column(DateTime)	# value/@value-date
    description__text = Column(UnicodeText)	# description/text()
    description__lang = Column(UnicodeText)	# description/@xml:lang
    transaction_type__text = Column(UnicodeText)	# transaction-type/text()
    transaction_type__code = Column(UnicodeText)	# transaction-type/@code
    transaction_type__lang = Column(UnicodeText)	# transaction-type/@xml:lang
    provider_org__text = Column(UnicodeText)	# provider-org/text()
    provider_org__ref = Column(UnicodeText)	# provider-org/@ref
    provider_org__provider_activity_id = Column(UnicodeText)	# provider-org/@provider-activity-id
    receiver_org__text = Column(UnicodeText)	# receiver-org/text()
    receiver_org__ref = Column(UnicodeText)	# receiver-org/@ref
    receiver_org__receiver_activity_id = Column(UnicodeText)	# receiver-org/@receiver-activity-id
    transaction_date__text = Column(UnicodeText)	# transaction-date/text()
    transaction_date__iso_date = Column(DateTime)	# transaction-date/@iso-date
    flow_type__text = Column(UnicodeText)	# flow-type/text()
    flow_type__code = Column(UnicodeText)	# flow-type/@code
    flow_type__lang = Column(UnicodeText)	# flow-type/@xml:lang
    aid_type__text = Column(UnicodeText)	# aid-type/text()
    aid_type__code = Column(UnicodeText)	# aid-type/@code
    aid_type__lang = Column(UnicodeText)	# aid-type/@xml:lang
    finance_type__text = Column(UnicodeText)	# finance-type/text()
    finance_type__code = Column(UnicodeText)	# finance-type/@code
    finance_type__lang = Column(UnicodeText)	# finance-type/@xml:lang
    tied_status__text = Column(UnicodeText)	# tied-status/text()
    tied_status__code = Column(UnicodeText)	# tied-status/@code
    tied_status__lang = Column(UnicodeText)	# tied-status/@xml:lang
    disbursement_channel__text = Column(UnicodeText)	# disbursement-channel/text()
    disbursement_channel__code = Column(UnicodeText)	# disbursement-channel/@code
    disbursement_channel__lang = Column(UnicodeText)	# disbursement-channel/@xml:lang
    @classmethod
    def _parse_xml(cls,logger,xml):
        data = {}
        data['ref'] = _nav(logger, xml, [], attrib='ref')
        data['value__text'] = _nav(logger, xml, ['value'], text=True, parser=_parse_float)
        data['value__currency'] = _nav(logger, xml, ['value'], attrib='currency')
        data['value__value_date'] = _nav(logger, xml, ['value'], attrib='value-date', parser=_parse_datetime)
        data['description__text'] = _nav(logger, xml, ['description'], text=True)
        data['description__lang'] = _nav(logger, xml, ['description'], attrib='xml:lang')
        data['transaction_type__text'] = _nav(logger, xml, ['transaction-type'], text=True)
        data['transaction_type__code'] = _nav(logger, xml, ['transaction-type'], attrib='code')
        data['transaction_type__lang'] = _nav(logger, xml, ['transaction-type'], attrib='xml:lang')
        data['provider_org__text'] = _nav(logger, xml, ['provider-org'], text=True)
        data['provider_org__ref'] = _nav(logger, xml, ['provider-org'], attrib='ref')
        data['provider_org__provider_activity_id'] = _nav(logger, xml, ['provider-org'], attrib='provider-activity-id')
        data['receiver_org__text'] = _nav(logger, xml, ['receiver-org'], text=True)
        data['receiver_org__ref'] = _nav(logger, xml, ['receiver-org'], attrib='ref')
        data['receiver_org__receiver_activity_id'] = _nav(logger, xml, ['receiver-org'], attrib='receiver-activity-id')
        data['transaction_date__text'] = _nav(logger, xml, ['transaction-date'], text=True)
        data['transaction_date__iso_date'] = _nav(logger, xml, ['transaction-date'], attrib='iso-date', parser=_parse_datetime)
        data['flow_type__text'] = _nav(logger, xml, ['flow-type'], text=True)
        data['flow_type__code'] = _nav(logger, xml, ['flow-type'], attrib='code')
        data['flow_type__lang'] = _nav(logger, xml, ['flow-type'], attrib='xml:lang')
        data['aid_type__text'] = _nav(logger, xml, ['aid-type'], text=True)
        data['aid_type__code'] = _nav(logger, xml, ['aid-type'], attrib='code')
        data['aid_type__lang'] = _nav(logger, xml, ['aid-type'], attrib='xml:lang')
        data['finance_type__text'] = _nav(logger, xml, ['finance-type'], text=True)
        data['finance_type__code'] = _nav(logger, xml, ['finance-type'], attrib='code')
        data['finance_type__lang'] = _nav(logger, xml, ['finance-type'], attrib='xml:lang')
        data['tied_status__text'] = _nav(logger, xml, ['tied-status'], text=True)
        data['tied_status__code'] = _nav(logger, xml, ['tied-status'], attrib='code')
        data['tied_status__lang'] = _nav(logger, xml, ['tied-status'], attrib='xml:lang')
        data['disbursement_channel__text'] = _nav(logger, xml, ['disbursement-channel'], text=True)
        data['disbursement_channel__code'] = _nav(logger, xml, ['disbursement-channel'], attrib='code')
        data['disbursement_channel__lang'] = _nav(logger, xml, ['disbursement-channel'], attrib='xml:lang')
        return Transaction(**data)

class Sector(Base):
    __tablename__ = 'sector'
    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('activity.id'), nullable=False)
    text = Column(UnicodeText)	# text()
    code = Column(Integer)	# @code
    vocabulary = Column(UnicodeText)	# @vocabulary
    percentage = Column(Float)	# @percentage
    lang = Column(UnicodeText)	# @xml:lang
    @classmethod
    def _parse_xml(cls,logger,xml):
        data = {}
        data['text'] = _nav(logger, xml, [], text=True)
        data['code'] = _nav(logger, xml, [], attrib='code', parser=_parse_int)
        data['vocabulary'] = _nav(logger, xml, [], attrib='vocabulary')
        data['percentage'] = _nav(logger, xml, [], attrib='percentage', parser=_parse_float)
        data['lang'] = _nav(logger, xml, [], attrib='xml:lang')
        return Sector(**data)

class ActivityDate(Base):
    __tablename__ = 'activitydate'
    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('activity.id'), nullable=False)
    text = Column(UnicodeText)	# text()
    type = Column(UnicodeText)	# @type
    iso_date = Column(DateTime)	# @iso-date
    lang = Column(UnicodeText)	# @xml:lang
    @classmethod
    def _parse_xml(cls,logger,xml):
        data = {}
        data['text'] = _nav(logger, xml, [], text=True)
        data['type'] = _nav(logger, xml, [], attrib='type')
        data['iso_date'] = _nav(logger, xml, [], attrib='iso-date', parser=_parse_datetime)
        data['lang'] = _nav(logger, xml, [], attrib='xml:lang')
        return ActivityDate(**data)

class ContactInfo(Base):
    __tablename__ = 'contactinfo'
    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('activity.id'), nullable=False)
    organisation__text = Column(UnicodeText)	# organisation/text()
    person_name__text = Column(UnicodeText)	# person-name/text()
    telephone__text = Column(UnicodeText)	# telephone/text()
    email__text = Column(UnicodeText)	# email/text()
    mailing_address__text = Column(UnicodeText)	# mailing-address/text()
    @classmethod
    def _parse_xml(cls,logger,xml):
        data = {}
        data['organisation__text'] = _nav(logger, xml, ['organisation'], text=True)
        data['person_name__text'] = _nav(logger, xml, ['person-name'], text=True)
        data['telephone__text'] = _nav(logger, xml, ['telephone'], text=True)
        data['email__text'] = _nav(logger, xml, ['email'], text=True)
        data['mailing_address__text'] = _nav(logger, xml, ['mailing-address'], text=True)
        return ContactInfo(**data)

class ParticipatingOrg(Base):
    __tablename__ = 'participatingorg'
    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('activity.id'), nullable=False)
    text = Column(UnicodeText)	# text()
    ref = Column(UnicodeText)	# @ref
    type = Column(UnicodeText)	# @type
    role = Column(UnicodeText)	# @role
    lang = Column(UnicodeText)	# @xml:lang
    @classmethod
    def _parse_xml(cls,logger,xml):
        data = {}
        data['text'] = _nav(logger, xml, [], text=True)
        data['ref'] = _nav(logger, xml, [], attrib='ref')
        data['type'] = _nav(logger, xml, [], attrib='type')
        data['role'] = _nav(logger, xml, [], attrib='role')
        data['lang'] = _nav(logger, xml, [], attrib='xml:lang')
        return ParticipatingOrg(**data)
